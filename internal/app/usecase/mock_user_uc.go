// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/usecase/user_uc.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	domain "github.com/CamiloLeonP/parking-radar/internal/app/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserUseCase is a mock of IUserUseCase interface.
type MockIUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUseCaseMockRecorder
}

// MockIUserUseCaseMockRecorder is the mock recorder for MockIUserUseCase.
type MockIUserUseCaseMockRecorder struct {
	mock *MockIUserUseCase
}

// NewMockIUserUseCase creates a new mock instance.
func NewMockIUserUseCase(ctrl *gomock.Controller) *MockIUserUseCase {
	mock := &MockIUserUseCase{ctrl: ctrl}
	mock.recorder = &MockIUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUseCase) EXPECT() *MockIUserUseCaseMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockIUserUseCase) DeleteUser(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUserUseCaseMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUserUseCase)(nil).DeleteUser), id)
}

// FindByID mocks base method.
func (m *MockIUserUseCase) FindByID(id uint) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIUserUseCaseMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIUserUseCase)(nil).FindByID), id)
}

// Register mocks base method.
func (m *MockIUserUseCase) Register(username, password, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", username, password, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIUserUseCaseMockRecorder) Register(username, password, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIUserUseCase)(nil).Register), username, password, email)
}

// UpdateUser mocks base method.
func (m *MockIUserUseCase) UpdateUser(id uint, username, email, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, username, email, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserUseCaseMockRecorder) UpdateUser(id, username, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserUseCase)(nil).UpdateUser), id, username, email, password)
}
